Sure, let's go through these concepts one by one. 

### SQL and Database Concepts

1. **What is the `LIKE` operator used for?**
   - The `LIKE` operator is used in SQL to search for a specified pattern in a column. It allows for wildcard characters to be used in the search.
   - **Example**:
     ```sql
     SELECT * FROM employees WHERE name LIKE 'J%n';
     ```
     This query selects all employees whose names start with 'J' and end with 'n'.

2. **How do you sort the result set of a query?**
   - You sort the result set of a query using the `ORDER BY` clause. You can specify one or more columns to sort by and the sort direction (`ASC` for ascending and `DESC` for descending).
   - **Example**:
     ```sql
     SELECT * FROM employees ORDER BY last_name ASC, first_name DESC;
     ```
     This query sorts the employees first by `last_name` in ascending order and then by `first_name` in descending order.

3. **What is the difference between `CHAR` and `VARCHAR`?**
   - **`CHAR`**: Fixed-length character data type. If the value is shorter than the defined length, it will be padded with spaces.
     - **Example**: `CHAR(10)` will always use 10 characters, padding with spaces if necessary.
   - **`VARCHAR`**: Variable-length character data type. It only uses as much space as needed to store the actual data, up to the specified length.
     - **Example**: `VARCHAR(10)` will use only as many characters as needed, up to 10.

4. **How do you insert a new record into a table?**
   - You insert a new record using the `INSERT INTO` statement.
   - **Example**:
     ```sql
     INSERT INTO employees (first_name, last_name, position) VALUES ('John', 'Doe', 'Developer');
     ```

5. **How do you retrieve all records from a table?**
   - You retrieve all records using the `SELECT * FROM` statement.
   - **Example**:
     ```sql
     SELECT * FROM employees;
     ```

6. **What is a `NULL` value?**
   - A `NULL` value represents the absence of a value or unknown data. It is different from an empty string or zero.

7. **What is a unique key?**
   - A unique key ensures that all values in a column or a combination of columns are unique across the table. It prevents duplicate values.
   - **Example**: A unique constraint on the `email` column of a `users` table ensures that no two users can have the same email address.

8. **What is a foreign key?**
   - A foreign key is a column or set of columns that establishes a link between the data in two tables. It references the primary key of another table.
   - **Example**: In a `orders` table, a `customer_id` foreign key might reference the `id` column in a `customers` table.

9. **What is a primary key?**
   - A primary key is a unique identifier for a record in a table. Each table should have a primary key that uniquely identifies each row.
   - **Example**: An `id` column in a `users` table that uniquely identifies each user.

10. **What is a table in a database?**
    - A table is a collection of related data organized in rows and columns. Each row represents a record, and each column represents a field of the record.

11. **What is a database?**
    - A database is an organized collection of structured information or data, typically stored electronically in a computer system.

12. **What are the different types of SQL statements?**
    - **DML (Data Manipulation Language)**: `SELECT`, `INSERT`, `UPDATE`, `DELETE`
    - **DDL (Data Definition Language)**: `CREATE`, `ALTER`, `DROP`
    - **DCL (Data Control Language)**: `GRANT`, `REVOKE`
    - **TCL (Transaction Control Language)**: `COMMIT`, `ROLLBACK`, `SAVEPOINT`

13. **What is SQL (Structured Query Language)?**
    - SQL is a standard language for managing and manipulating databases. It is used to perform tasks such as querying, updating, and managing data.

### SQL Advanced Topics

14. **What are different types of joins in SQL (e.g., inner join, left join, right join)?**
    - **INNER JOIN**: Returns records that have matching values in both tables.
      - **Example**:
        ```sql
        SELECT * FROM orders
        INNER JOIN customers ON orders.customer_id = customers.id;
        ```
    - **LEFT JOIN**: Returns all records from the left table and matched records from the right table. Records in the left table with no match in the right table will have NULLs for right table columns.
      - **Example**:
        ```sql
        SELECT * FROM orders
        LEFT JOIN customers ON orders.customer_id = customers.id;
        ```
    - **RIGHT JOIN**: Returns all records from the right table and matched records from the left table. Records in the right table with no match in the left table will have NULLs for left table columns.
      - **Example**:
        ```sql
        SELECT * FROM orders
        RIGHT JOIN customers ON orders.customer_id = customers.id;
        ```
    - **FULL JOIN**: Returns all records when there is a match in either left or right table.
      - **Example**:
        ```sql
        SELECT * FROM orders
        FULL JOIN customers ON orders.customer_id = customers.id;
        ```

15. **What is a candidate key in SQL?**
    - A candidate key is a column or set of columns that can uniquely identify a row in a table. A table can have multiple candidate keys, but only one can be chosen as the primary key.

16. **What is a CTE (Common Table Expression) in SQL?**
    - A CTE is a temporary result set that you can reference within a `SELECT`, `INSERT`, `UPDATE`, or `DELETE` statement. It is defined using the `WITH` clause.
    - **Example**:
      ```sql
      WITH EmployeeCTE AS (
        SELECT * FROM employees WHERE department = 'Sales'
      )
      SELECT * FROM EmployeeCTE;
      ```

17. **Write a SQL query to return the opposite gender for a particular record.**
    - This example assumes there is a `gender` column with values like 'Male' and 'Female'.
    - **Example**:
      ```sql
      SELECT CASE gender
        WHEN 'Male' THEN 'Female'
        WHEN 'Female' THEN 'Male'
        ELSE 'Unknown'
      END AS opposite_gender
      FROM employees
      WHERE id = 1;
      ```

18. **What is the difference between GET and POST methods in web services?**
    - **GET**: Requests data from a server. It is idempotent and should not change the state of the server. Data is sent in the URL.
    - **POST**: Submits data to be processed to a server. It can change the server state and data is sent in the body of the request.

19. **What is the major difference between Angular and AngularJS?**
    - **AngularJS**: The original version of Angular, based on JavaScript and follows MVC architecture.
    - **Angular (Angular 2+)**: The modern version, based on TypeScript, uses a component-based architecture, and offers improved performance and features.

20. **How would you write a SQL query to get total marks for students?**
    - **Example**:
      ```sql
      SELECT student_id, SUM(marks) AS total_marks
      FROM exam_results
      GROUP BY student_id;
      ```

21. **How would you write a SQL query to swap values in a column based on a condition?**
    - **Example**:
      ```sql
      UPDATE employees
      SET position = CASE
        WHEN position = 'Junior' THEN 'Senior'
        WHEN position = 'Senior' THEN 'Junior'
        ELSE position
      END;
      ```

22. **How can you pass a table as a parameter in a stored procedure in SQL Server?**
    - You can use a table-valued parameter. First, define a user-defined table type, then use it as a parameter in your stored procedure.
    - **Example**:
      ```sql
      -- Define table type
      CREATE TYPE EmployeeTableType AS TABLE (
        id INT,
        name NVARCHAR(50)
      );
      
      -- Create stored procedure
      CREATE PROCEDURE InsertEmployees
      @Employees EmployeeTableType READONLY
      AS
      BEGIN
        INSERT INTO employees (id, name)
        SELECT id, name FROM @Employees;
      END;
      ```

23. **What are magic tables in SQL, and how do they work?**
    - Magic tables are a concept in SQL Server used in triggers. They are virtual tables (`INSERTED` and `DELETED`) that represent the state of the data before and after an operation, allowing you to reference the old and new values.
    - **Example**:
      ```sql
      CREATE TRIGGER trgAfterUpdate
      ON employees
      FOR UPDATE
      AS
      BEGIN
        SELECT * FROM INSERTED; -- New values
        SELECT * FROM DELETED;  -- Old values
      END;
      ```

Sure, here are some more important SQL and database-related concepts, each with an example where applicable:

### Additional Important SQL and Database Concepts

24. **What is normalization in a database?**
    - Normalization is the process of organizing data to minimize redundancy and improve data integrity. It involves dividing large tables into smaller ones and defining relationships between them. Common normal forms include 1NF (First Normal Form), 2NF (Second Normal Form), and 3NF (Third Normal Form).
    - **Example**:
      - **Before Normalization**: A table with customer and order details might include redundant customer information for each order.
      - **After Normalization**: Split into two tables, one for customers and one for orders, with a foreign key linking them.

25. **What is denormalization, and when is it used?**
    - Denormalization is the process of combining normalized tables into fewer tables to improve query performance. It can be used to reduce the number of joins needed and speed up read operations at the cost of increased redundancy and potential data anomalies.
    - **Example**: Combining `orders` and `customers` tables into a single table to avoid joins for frequently queried reports.

26. **What is an index in a database?**
    - An index is a database object that improves the speed of data retrieval operations on a table. It works like an index in a book, allowing the database to find data more quickly without scanning the entire table.
    - **Example**:
      ```sql
      CREATE INDEX idx_last_name ON employees (last_name);
      ```

27. **What is a stored procedure?**
    - A stored procedure is a precompiled collection of one or more SQL statements that can be executed as a unit. It allows for code reuse, improved performance, and easier maintenance.
    - **Example**:
      ```sql
      CREATE PROCEDURE GetEmployeeById
        @EmployeeId INT
      AS
      BEGIN
        SELECT * FROM employees WHERE id = @EmployeeId;
      END;
      ```

28. **What is a trigger, and how does it work?**
    - A trigger is a special type of stored procedure that automatically executes in response to certain events on a table (e.g., `INSERT`, `UPDATE`, `DELETE`). It can be used to enforce business rules or data integrity.
    - **Example**:
      ```sql
      CREATE TRIGGER trgBeforeInsert
      ON employees
      BEFORE INSERT
      AS
      BEGIN
        IF EXISTS (SELECT * FROM INSERTED WHERE salary < 0)
        BEGIN
          RAISERROR('Salary cannot be negative', 16, 1);
          ROLLBACK;
        END
      END;
      ```

29. **What is a view in SQL?**
    - A view is a virtual table that provides a way to present data from one or more tables. It does not store data itself but presents data in a customized format. Views can simplify complex queries and improve security by restricting access to specific data.
    - **Example**:
      ```sql
      CREATE VIEW EmployeeView AS
      SELECT id, name, department
      FROM employees
      WHERE department = 'Sales';
      ```

30. **What is a subquery, and how is it used?**
    - A subquery is a query nested inside another query. It is used to perform operations that require intermediate results, such as filtering or calculating values based on another query's results.
    - **Example**:
      ```sql
      SELECT name
      FROM employees
      WHERE department_id = (
        SELECT id
        FROM departments
        WHERE department_name = 'Sales'
      );
      ```

31. **What is a transaction, and what are its key properties (ACID)?**
    - A transaction is a sequence of SQL operations performed as a single unit of work. Transactions are used to ensure data integrity and consistency. The key properties of a transaction are ACID: Atomicity, Consistency, Isolation, and Durability.
    - **Example**:
      ```sql
      BEGIN TRANSACTION;
      UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
      UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
      COMMIT;
      ```

32. **What is the difference between UNION and UNION ALL?**
    - **UNION**: Combines the result sets of two or more queries and removes duplicate rows.
    - **UNION ALL**: Combines the result sets of two or more queries without removing duplicates.
    - **Example**:
      ```sql
      -- UNION example
      SELECT city FROM customers
      UNION
      SELECT city FROM suppliers;
      
      -- UNION ALL example
      SELECT city FROM customers
      UNION ALL
      SELECT city FROM suppliers;
      ```

33. **What are aggregate functions in SQL, and can you provide examples?**
    - Aggregate functions perform calculations on a set of values and return a single value. Common aggregate functions include `COUNT()`, `SUM()`, `AVG()`, `MAX()`, and `MIN()`.
    - **Example**:
      ```sql
      SELECT AVG(salary) AS average_salary FROM employees;
      ```

34. **What is SQL injection, and how can it be prevented?**
    - SQL injection is a security vulnerability that allows attackers to execute arbitrary SQL code by injecting malicious input into queries. It can be prevented by using prepared statements, parameterized queries, and input validation.
    - **Example of a vulnerable query**:
      ```sql
      SELECT * FROM users WHERE username = 'user' AND password = 'pass';
      ```
      **Prevention using prepared statements**:
      ```sql
      PREPARE stmt FROM 'SELECT * FROM users WHERE username = ? AND password = ?';
      EXECUTE stmt USING @username, @password;
      ```

35. **What is a database schema?**
    - A database schema defines the structure of a database, including tables, columns, relationships, constraints, and other elements. It serves as a blueprint for how data is organized and managed.
    - **Example**:
      ```sql
      CREATE TABLE employees (
        id INT PRIMARY KEY,
        name VARCHAR(100),
        department VARCHAR(50),
        hire_date DATE
      );
      ```

36. **What is data integrity, and how is it maintained in a database?**
    - Data integrity refers to the accuracy, consistency, and reliability of data in a database. It is maintained through constraints (e.g., primary keys, foreign keys), normalization, and validation rules.
    - **Example**:
      ```sql
      ALTER TABLE orders
      ADD CONSTRAINT fk_customer
      FOREIGN KEY (customer_id)
      REFERENCES customers(id);
      ```

37. **What is a stored function, and how does it differ from a stored procedure?**
    - A stored function is similar to a stored procedure but is designed to return a single value and can be used within SQL statements. Stored procedures can perform actions but do not return a value directly.
    - **Example**:
      ```sql
      CREATE FUNCTION GetEmployeeName (employee_id INT)
      RETURNS VARCHAR(100)
      AS
      BEGIN
        DECLARE employee_name VARCHAR(100);
        SELECT name INTO employee_name FROM employees WHERE id = employee_id;
        RETURN employee_name;
      END;
      ```

38. **What is an index in a database, and how does it affect query performance?**
    - An index improves query performance by allowing the database to quickly locate rows without scanning the entire table. It speeds up retrieval operations but can slow down write operations due to the overhead of maintaining the index.
    - **Example**:
      ```sql
      CREATE INDEX idx_name ON employees (name);
      ```

39. **What is a composite key, and when is it used?**
    - A composite key is a primary key that consists of two or more columns. It is used when a single column is not sufficient to uniquely identify a record.
    - **Example**:
      ```sql
      CREATE TABLE order_items (
        order_id INT,
        item_id INT,
        quantity INT,
        PRIMARY KEY (order_id, item_id)
      );
      ```

40. **What are different types of constraints in SQL?**
    - **NOT NULL**: Ensures that a column cannot have NULL values.
    - **UNIQUE**: Ensures that all values in a column are unique.
    - **PRIMARY KEY**: Uniquely identifies each row in a table and combines `NOT NULL` and `UNIQUE`.
    - **FOREIGN KEY**: Ensures referential integrity between tables.
    - **CHECK**: Ensures that values in a column meet a specific condition.
    - **DEFAULT**: Assigns a default value to a column if no value is specified.

Absolutely! Here’s a continuation of important SQL and database-related concepts:

### Additional Key SQL and Database Concepts

41. **What is a database transaction log, and why is it important?**
    - A database transaction log records all changes made to the database. It is essential for data recovery, rollback operations, and ensuring ACID properties (Atomicity, Consistency, Isolation, Durability).
    - **Example**: The log records each `INSERT`, `UPDATE`, or `DELETE` operation along with the transaction ID.

42. **What is a materialized view, and how does it differ from a regular view?**
    - A materialized view is a database object that stores the result of a query physically on disk, which can improve performance for complex queries. Unlike a regular view, which is virtual and updated dynamically, a materialized view needs to be refreshed to reflect changes.
    - **Example**:
      ```sql
      CREATE MATERIALIZED VIEW sales_summary AS
      SELECT product_id, SUM(sales) AS total_sales
      FROM sales
      GROUP BY product_id;
      ```

43. **What is an entity-relationship diagram (ERD), and how is it used?**
    - An ERD is a visual representation of the database schema that shows entities (tables), attributes (columns), and relationships between entities. It helps in designing and understanding the database structure.
    - **Example**: An ERD might show a `Customers` table with a one-to-many relationship with an `Orders` table.

44. **What is a database index fragmentation, and how can it be managed?**
    - Index fragmentation occurs when the physical storage of index data becomes inefficient due to frequent data modifications. It can be managed by rebuilding or reorganizing indexes to improve performance.
    - **Example**:
      ```sql
      -- Rebuild index
      ALTER INDEX idx_name ON table_name REBUILD;
      
      -- Reorganize index
      ALTER INDEX idx_name ON table_name REORGANIZE;
      ```

45. **What is a database backup strategy, and why is it important?**
    - A backup strategy involves regularly creating copies of database data to prevent data loss and ensure recovery in case of failure. It typically includes full backups, incremental backups, and transaction log backups.
    - **Example**: Schedule daily full backups and hourly transaction log backups.

46. **What is the difference between a clustered index and a non-clustered index?**
    - **Clustered Index**: Determines the physical order of data in a table. There can be only one clustered index per table.
      - **Example**:
        ```sql
        CREATE CLUSTERED INDEX idx_id ON employees (id);
        ```
    - **Non-Clustered Index**: Creates a separate structure from the table that holds pointers to the table’s data. Multiple non-clustered indexes can exist on a table.
      - **Example**:
        ```sql
        CREATE NONCLUSTERED INDEX idx_name ON employees (name);
        ```

47. **What is database sharding?**
    - Sharding is a database architecture pattern where large databases are divided into smaller, more manageable pieces, called shards. Each shard is a separate database that contains a subset of the data.
    - **Example**: Splitting a large `users` table into `users_part1`, `users_part2`, etc., based on user IDs.

48. **What is an OLAP (Online Analytical Processing) database?**
    - OLAP databases are optimized for complex queries and data analysis, often used in data warehousing. They support multi-dimensional analysis and enable users to perform complex calculations, trend analysis, and data modeling.
    - **Example**: Using an OLAP cube to analyze sales data across multiple dimensions like time, region, and product category.

49. **What is an OLTP (Online Transaction Processing) database?**
    - OLTP databases are optimized for managing and processing a large number of transactional operations. They support high transaction rates and are designed for routine business operations such as order processing and customer management.
    - **Example**: A retail database handling daily transactions like sales and inventory updates.

50. **What is a database schema migration?**
    - Schema migration involves changing the database schema over time, usually to accommodate changes in application requirements. It includes adding or removing columns, changing data types, and modifying table structures.
    - **Example**:
      ```sql
      ALTER TABLE employees ADD COLUMN department_id INT;
      ```

51. **What is data warehousing?**
    - Data warehousing is the process of collecting and managing data from various sources to provide meaningful business insights through reporting and analysis. It involves extracting, transforming, and loading (ETL) data into a central repository.
    - **Example**: Aggregating sales data from multiple regions into a central data warehouse for analysis.

52. **What is a cross join in SQL?**
    - A cross join returns the Cartesian product of two tables, meaning it pairs every row from the first table with every row from the second table.
    - **Example**:
      ```sql
      SELECT * FROM products
      CROSS JOIN categories;
      ```
      This query returns all combinations of products and categories.

53. **What is a recursive query, and how is it used?**
    - A recursive query is a query that references itself to retrieve hierarchical or tree-structured data. It is often used to query hierarchical data such as organizational charts or folder structures.
    - **Example**:
      ```sql
      WITH RECURSIVE OrgChart AS (
        SELECT id, name, manager_id
        FROM employees
        WHERE manager_id IS NULL
        UNION ALL
        SELECT e.id, e.name, e.manager_id
        FROM employees e
        INNER JOIN OrgChart o ON e.manager_id = o.id
      )
      SELECT * FROM OrgChart;
      ```

54. **What is the difference between `INNER JOIN` and `CROSS JOIN`?**
    - **INNER JOIN**: Returns rows that have matching values in both tables based on the join condition.
      - **Example**:
        ```sql
        SELECT * FROM orders
        INNER JOIN customers ON orders.customer_id = customers.id;
        ```
    - **CROSS JOIN**: Returns the Cartesian product of both tables, with every row in the first table paired with every row in the second table.
      - **Example**:
        ```sql
        SELECT * FROM products
        CROSS JOIN suppliers;
        ```

55. **What is a database trigger, and how can it be used?**
    - A trigger is a stored procedure that is automatically executed or fired when certain events occur on a table, such as `INSERT`, `UPDATE`, or `DELETE`. It is used to enforce rules, validate data, or maintain audit logs.
    - **Example**:
      ```sql
      CREATE TRIGGER trgAfterInsert
      ON employees
      AFTER INSERT
      AS
      BEGIN
        INSERT INTO audit_log (action, log_date)
        VALUES ('INSERT', GETDATE());
      END;
      ```
Sure! Here’s another set of important SQL and database-related concepts:

### Additional Key SQL and Database Concepts

56. **What is a schema in SQL, and how does it differ from a database?**
    - A schema is a collection of database objects, such as tables, views, indexes, and procedures, within a database. It helps organize and manage database objects. A database can contain multiple schemas, but a schema is typically used to group related objects.
    - **Example**:
      ```sql
      CREATE SCHEMA sales;
      CREATE TABLE sales.orders (
        order_id INT PRIMARY KEY,
        order_date DATE
      );
      ```

57. **What is a pivot table in SQL?**
    - A pivot table transforms rows into columns, aggregating data to provide a summary. It is useful for generating cross-tabulated reports and comparing data across different dimensions.
    - **Example** (in SQL Server):
      ```sql
      SELECT * 
      FROM (
        SELECT year, month, sales_amount
        FROM sales_data
      ) AS SourceTable
      PIVOT (
        SUM(sales_amount)
        FOR month IN ([January], [February], [March])
      ) AS PivotTable;
      ```

58. **What is the purpose of the `GROUP BY` clause in SQL?**
    - The `GROUP BY` clause groups rows that have the same values into summary rows. It is often used with aggregate functions like `COUNT()`, `SUM()`, and `AVG()` to perform calculations on grouped data.
    - **Example**:
      ```sql
      SELECT department, COUNT(*) AS employee_count
      FROM employees
      GROUP BY department;
      ```

59. **What is the purpose of the `HAVING` clause in SQL?**
    - The `HAVING` clause is used to filter groups of rows after aggregation has occurred, similar to how the `WHERE` clause filters individual rows before aggregation.
    - **Example**:
      ```sql
      SELECT department, COUNT(*) AS employee_count
      FROM employees
      GROUP BY department
      HAVING COUNT(*) > 10;
      ```

60. **What are window functions in SQL, and can you provide an example?**
    - Window functions perform calculations across a set of table rows related to the current row. They are useful for tasks like ranking, running totals, and moving averages.
    - **Example**:
      ```sql
      SELECT employee_id, salary, 
             RANK() OVER (ORDER BY salary DESC) AS salary_rank
      FROM employees;
      ```

61. **What is the difference between `UNION` and `INTERSECT`?**
    - **UNION**: Combines results from two or more queries and removes duplicate rows.
    - **INTERSECT**: Returns rows that are common to both queries.
    - **Example**:
      ```sql
      -- UNION example
      SELECT city FROM customers
      UNION
      SELECT city FROM suppliers;
      
      -- INTERSECT example
      SELECT city FROM customers
      INTERSECT
      SELECT city FROM suppliers;
      ```

62. **What is data normalization, and why is it important?**
    - Data normalization involves organizing data to reduce redundancy and improve data integrity. It ensures that data is stored efficiently and maintains consistency by dividing data into related tables.
    - **Example**: Splitting a table with customer and order information into separate `customers` and `orders` tables to eliminate redundancy.

63. **What is denormalization, and when might it be used?**
    - Denormalization involves combining normalized tables to optimize read performance, often at the expense of increased redundancy. It can be used to speed up complex queries or reporting.
    - **Example**: Combining `customer` and `order` information into a single table to avoid complex joins for reporting.

64. **What is a surrogate key, and how does it differ from a natural key?**
    - A surrogate key is an artificial key, usually an auto-incremented number, used to uniquely identify records in a table. A natural key is a key that has a logical relationship to the data, such as an email address or Social Security number.
    - **Example**:
      - **Surrogate Key**: `customer_id` (auto-incremented)
      - **Natural Key**: `email_address`

65. **What is a database view, and how can it be used?**
    - A view is a virtual table based on the result of a query. It simplifies complex queries and provides a way to present data in a specific format or restrict access to sensitive information.
    - **Example**:
      ```sql
      CREATE VIEW ActiveCustomers AS
      SELECT customer_id, name
      FROM customers
      WHERE status = 'active';
      ```

66. **What is a recursive CTE (Common Table Expression), and how is it used?**
    - A recursive CTE is a type of CTE that references itself to perform hierarchical or recursive queries. It is useful for querying data with a parent-child relationship.
    - **Example**:
      ```sql
      WITH RECURSIVE OrgChart AS (
        SELECT id, name, manager_id
        FROM employees
        WHERE manager_id IS NULL
        UNION ALL
        SELECT e.id, e.name, e.manager_id
        FROM employees e
        INNER JOIN OrgChart o ON e.manager_id = o.id
      )
      SELECT * FROM OrgChart;
      ```

67. **What is the purpose of the `ALTER TABLE` statement?**
    - The `ALTER TABLE` statement is used to modify the structure of an existing table, such as adding or dropping columns, modifying data types, or adding constraints.
    - **Example**:
      ```sql
      ALTER TABLE employees
      ADD COLUMN date_of_birth DATE;
      
      ALTER TABLE employees
      DROP COLUMN middle_name;
      ```

68. **What are schema-bound views, and why are they used?**
    - Schema-bound views are views that are tied to the schema of the underlying tables. This means that the view will not be allowed to exist if changes are made to the underlying tables that would affect the view.
    - **Example**:
      ```sql
      CREATE VIEW SalesView
      WITH SCHEMABINDING
      AS
      SELECT product_id, SUM(sales_amount) AS total_sales
      FROM sales
      GROUP BY product_id;
      ```

69. **What is a deadlock in SQL, and how can it be resolved?**
    - A deadlock occurs when two or more transactions are waiting for each other to release resources, causing a standstill. Deadlocks can be resolved by using transaction management techniques, such as setting timeouts or using database-specific deadlock detection and resolution mechanisms.
    - **Example**: Deadlock detection might automatically choose one of the transactions to roll back and retry.

70. **What is a data integrity constraint, and can you provide examples?**
    - Data integrity constraints ensure the accuracy and consistency of data in a database. Common constraints include `NOT NULL`, `UNIQUE`, `PRIMARY KEY`, `FOREIGN KEY`, and `CHECK`.
    - **Example**:
      ```sql
      ALTER TABLE employees
      ADD CONSTRAINT chk_salary CHECK (salary > 0);
      ```

71. **What is the purpose of the `TRUNCATE TABLE` statement, and how does it differ from `DELETE`?**
    - The `TRUNCATE TABLE` statement removes all rows from a table but does not log individual row deletions, making it faster than `DELETE`. It also resets identity columns and cannot be rolled back in some databases.
    - **Example**:
      ```sql
      TRUNCATE TABLE employees;
      ```

72. **What are the differences between `INNER JOIN`, `LEFT JOIN`, and `RIGHT JOIN`?**
    - **INNER JOIN**: Returns rows with matching values in both tables.
    - **LEFT JOIN**: Returns all rows from the left table and matching rows from the right table. Non-matching rows in the right table will be NULL.
    - **RIGHT JOIN**: Returns all rows from the right table and matching rows from the left table. Non-matching rows in the left table will be NULL.
    - **Example**:
      ```sql
      -- INNER JOIN
      SELECT * FROM employees
      INNER JOIN departments ON employees.department_id = departments.id;
      
      -- LEFT JOIN
      SELECT * FROM employees
      LEFT JOIN departments ON employees.department_id = departments.id;
      
      -- RIGHT JOIN
      SELECT * FROM employees
      RIGHT JOIN departments ON employees.department_id = departments.id;
      ```

73. **What is a database index, and how does it improve performance?**
    - An index is a data structure that improves the speed of data retrieval operations on a table. It works by providing a quick way to look up rows based on the indexed column(s).
    - **Example**:
      ```sql
      CREATE INDEX idx_last_name ON employees (last_name);
      ```

74. **What is a transaction log in SQL, and how is it used for recovery?**
    - A transaction log records all changes made to the database, including transactions. It is used for database recovery by replaying or rolling back transactions in the event of a failure.
    - **Example**: In case of a system crash, the transaction log helps restore the database to the state it was in before the crash.

75. **What is data partitioning, and how does it help manage large datasets?**
    - Data partitioning involves dividing a large table into smaller, more manageable pieces, called partitions. Each partition can be stored separately, improving query performance and manageability.
    - **Example**: Partitioning a `sales` table by year to improve

 query performance for yearly reports.
